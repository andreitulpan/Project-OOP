# Copyright 2021 - Tulpan Andrei 324CA
	Pentru implementarea proiectului, am folosit o clasa
denumita Solver in care salvez toate datele primite
la input apoi execut simularea tot prin intermediul
acestei clase, utilizand metoda "simulate". Am ales
sa implementez aceasta clasa utilizand lazy singleton
pattern pentru o optimizare mai buna.
	In aceasta clasa denumita solver am salvate
urmatoarele:
	- numarul de ani pe care se executa simularea
	- bugetul mosului pentru anul curent
	- o lista cu copii
	- o lista cu cadourile mosului
	- o lista cu schimbarile anuale
	- instanta acestei clase (singleton pattern)
	- un JSONArray pentru output
	- o lista cu orase
	In main se aduce instanta clasei de tip Solver,
apoi se salveaza datele in aceasta clasa prin intermediul
clasei "GetInput" si a metodei sale "getData". Ulterior se
apeleaza metoda "simulate" din clasa Solver care executa
simularea pe numarul de ani primit ca input si in plus fata
de acestia se executa si pe primul an (anul 0).
	Pentru simulare am implementat clasa "Simulation" in care
execut fiecare pas al simularii in functie de anul curent. Pentru
calcularea averageScore-ului am implementat design pattern-urile
Factory & Strategy care ma ajuta sa folosesc o strategie pentru
primul an si o alta strategie pentru ceilalti ani. In acelasi
mod am procedat si pentru asignarea cadourilor, implementand
aceleasi design pattern-uri.
	Pentru cazul in care anul este diferit fata de primul, se vor
face si update-uri, acestea realizandu-se prin intermediul metodei
solver-ului denumita "newYear". Aceasta metoda apeleaza la randul ei
alte metode, printre care o metoda care creste varsta copiiilor cu
un an, o metoda care adauga copiii noi in lista, o metoda care face
update pe fiecare copil in parte (daca a primit ceva pentru update)
si o metoda prin care se updateaza cadourile si bugetul mosului.
	Clasele "Child" si "Gift" au fost implementate utilizand design
pattern-ul Builder pentru a putea fi adaugati noi parametri in
viitor fara modificari majore, cum au fost si parametrii adaugati
noi acum, pentru Child - niceScoreBonus si elf, iar pentru Gift - quantity.
	In implementare se mai gasesc si clasele "AssignGifts" si
"PerfectGift" care lucreaza impreuna pentru asignarea cadourilor.
Clasa "PerfectGift" intoarce cel mai ieftin cadou disponibil ca
stoc dintr-o anumita categorie pentru strategia normala, iar pentru
strategia elfului "YELLOW" intoarce primul cadou, apoi se va verifica
si daca acesta este disponibil. Clasa AssignGifts ofera fiecarui
copil cadourile potrivite in functie de preferintele acestuia si
de bugetul ramas dupa fiecare cadou primit, iar daca acesta nu a primit
niciun cadou si are elful "YELLOW", acesta ii ofera cadoul gasit prin
intermediul metodei mentionate mai sus de la strategia corespunzatoare
acestuia, daca acesta mai este disponibil.
	La finalul fiecarei simulari pentru fiecare an se salveaza
o lista cu toti copiii prin intermediul clasei "SetOutput" si
a metodei acesteia "setChildList", care mai tarziu este adaugata in
JSONArray-ul de output.
	La final, in clasa Main se apeleaza metoda statica
"setData" a clasei "SetOutput" prin care se scriu in fisier
toate datele salvate in JSONArray-ul destinat datelor de iesire.